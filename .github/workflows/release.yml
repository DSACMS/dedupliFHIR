name: publish

on:
  release:
    types: [published]

jobs:
  changelog:
    runs-on: ubuntu-latest
    steps:
      - name: "✏️ Generate release changelog"
        uses: heinrichreimer/action-github-changelog-generator@v2.3
        with:
          base: CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }} 

  publish:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        # windows-latest, macos-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Configure Node caching
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install poetry
        working-directory: .
        run: pipx install poetry
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          working-directory: .
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Set up and create virtual environment 
        working-directory: .
        run: |
          poetry config --list
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
          poetry config --list

      - name: Install dependencies
        working-directory: .
        run: |
          poetry install --no-interaction

      - name: Install Node dependencies
        run: npm install

      - name: Build distribution
        env:
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
        run: npm run dist

      - name: Create zip file
        working-directory: ./frontend/dist
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install zip
          pwd
          ls
          mkdir DedupliFHIR-linux
          mv DedupliFHIR*.AppImage DedupliFHIR-linux
          mv deduplifhir-app*.snap DedupliFHIR-linux
          zip -r DedupliFHIR-linux.zip DedupliFHIR-linux

      - name: Check contents
        run: |
          ls
          pwd

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: DedupliFHIR-macOS
          path: |
            frontend/dist/DedupliFHIR-linux.zip
